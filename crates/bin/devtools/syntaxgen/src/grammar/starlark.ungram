// Starlark Un-Grammar.
//
// This grammar specifies the structure of Starlark's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

// The root node of a Starlark file or Module.
//
// Examples:
//
// load("math", "sin", "cos")
//
// def f(x):
//   return cos(x) + sin(x)
File = (Statement | 'newline')* 'eof'

// A single statement in a Starlark file.
//
// Examples:
//
// x = 1
// y = 2
// greeting = "hello"
Statement =
    DefStmt
  | IfStmt
  | ForStmt
  | SimpleStmt

// A function definition statement.
//
// Examples:
//
// def foo(x):
//     return x * 2
DefStmt =
  'def' 'identifier' '('
    (Parameters (',')?)?
  ')' ':' Suite

// A comma-separated list of function parameters.
//
// Examples:
//
// x, y, z # in the example below
//
// def sum(x, y, z):
//    return x + y + z
Parameters = Parameter (',' Parameter)*

// A single function parameter.
//
// Examples:
//
// x
// x=1
// *
// *args
// **kwargs
Parameter =
    'identifier'
  | ('identifier' '=' Test)
  | '*'
  | ('*' 'identifier')
  | ('**' 'identifier')

// An if statement with optional elif and else branches.
//
// Examples:
//
// if x > 0:
//     y = x
// elif x < 0:
//     y = -x
// else:
//     y = 0
IfStmt =
  'if' Test ':' Suite
  ElifClauses*
  ElseClause?

// An elif clause in an if statement.
//
// Examples:
//
// elif x < 0:
//     y = -x
ElifClauses = 'elif' Test ':' Suite

// An else clause in an if statement.
//
// Examples:
//
// else:
//     y = 0
ElseClause = 'else' ':' Suite

// A for loop statement.
//
// Examples:
//
// for x in range(10):
//     print(x)
ForStmt = 'for' LoopVariables 'in' Expression ':' Suite

// A suite of statements, either indented or a SimpleStmt.
//
// Examples:
//
// x = 1
//
// if x > 0:
//     y = x
// else:
//     y = -x
Suite =
  ('newline' 'indent' Statement* 'outdent')?
| SimpleStmt


// A statement that can be executed on a single line.
//
// Examples:
//
// x = 1
// return x
SimpleStmt = SmallStmt (';' SmallStmt)* ';'?

// A statement that does not contain other statements.
//
// Examples:
//
// return x
// break
// x = 1
SmallStmt =
    ReturnStmt
  | BreakStmt
  | ContinueStmt
  | PassStmt
  | AssignStmt
  | ExprStmt
  | LoadStmt

// A return statement, which can include an expression.
//
// Examples:
//
// return
// return x
ReturnStmt = 'return' Expression?

// A break statement used to exit a loop.
//
// Examples:
//
// for x in range(10):
//     if x == 5:
//         break
//     print(x)
BreakStmt = 'break'

// A continue statement used to skip to the next iteration of a loop.
//
// Examples:
//
// for x in range(10):
//     if x == 5:
//         continue
//     print(x)
ContinueStmt = 'continue'

// A pass statement used as a no-op placeholder.
//
// Examples:
//
// def todo():
//     pass
PassStmt = 'pass'

// An assignment statement, including assignment operators.
//
// Examples:
//
// x = 1
// x += 1
AssignStmt = Expression ('=' | '+=' | '-=' | '*=' | '/=' | '//=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=') Expression

// An expression statement.
//
// Examples:
//
// x + 1
ExprStmt = Expression

// A load statement used to import functions or variables from another file.
//
// Examples:
//
// load("math", "sin")
// load("//foo:bar.bzl", "foo")
LoadStmt = 'load' '(' 'string' (',' ('identifier' '=')? 'string')* ','? ')'

// A node that forms the basis for an expression.
//
// Examples:
//
// x + 1
// x > 1
Test =
    IfExpr
  | PrimaryExpr
  | UnaryExpr
  | BinaryExpr
  | LambdaExpr

// An inline if expression.
//
// Examples:
//
// x if x > 0 else -x
IfExpr = Test 'if' Test 'else' Test

// A primary expression node.
//
// Examples:
//
// x
// x.foo()
PrimaryExpr =
    Operand
  | PrimaryExpr DotSuffix
  | PrimaryExpr CallSuffix
  | PrimaryExpr SliceSuffix

// An operand in an expression.
//
// Examples:
//
// x
// 1
// [1, 2, 3]
Operand =
    'identifier'
  | 'int' | 'float' | 'string' | 'bytes'
  | ListExpr | ListComp
  | DictExpr | DictComp
  | '(' (Expression (',')?)? ')'

// A dot suffix node in a primary expression.
//
// Examples:
//
// .foo
DotSuffix = '.' 'identifier'

// A slice suffix node in a primary expression.
//
// Examples:
//
// [1:3]
// [1:]
SliceSuffix =
    '[' Expression? ':' Test? (':' (Test)?)? ']'
  | '[' Expression ']'

// A call suffix node in a primary expression.
//
// Examples:
//
// (1, 2, 3)
CallSuffix = '(' (Arguments (',')?)? ')'

// A list of arguments for a function call.
//
// Examples:
//
// 1, 2, 3
Arguments = Argument (',' Argument)*

// A single argument in a function call.
//
// Examples:
//
// x
// x=1
// args
// **kwargs
Argument = Test | 'identifier' '=' Test | '*' Test | '**' Test

// A list expression.
//
// Examples:
//
// [1, 2, 3]
ListExpr = '[' (Expression (',')?)? ']'

// A list comprehension expression.
//
// Examples:
//
// [x * 2 for x in range(10) if x % 2 == 0]
ListComp = '[' Test CompClause* ']'

// A dictionary expression.
//
// Examples:
//
// {"x": 1, "y": 2}
DictExpr = '{' (Entries (',')?)? '}'

// A dictionary comprehension expression.
//
// Examples:
//
// {x: x * 2 for x in range(10) if x % 2 == 0}
DictComp = '{' Entry CompClause* '}'

// A list of entries in a dictionary.
//
// Examples:
//
// "x": 1, "y": 2
Entries = Entry (',' Entry)*

// A single entry in a dictionary.
//
// Examples:
//
// "x": 1
Entry = Test ':' Test

// A comprehension clause, including for and if clauses.
//
// Examples:
//
// for x in range(10)
// if x % 2 == 0
CompClause = 'for' LoopVariables 'in' Test | 'if' Test

// A unary expression.
//
// Examples:
//
// +x
// -x
// ~x
// not x
UnaryExpr =
    '+' Test
  | '-' Test
  | '~' Test
  | 'not' Test

// A binary expression consisting of one or more binary operators.
//
// Examples:
//
// x + 1
// x < 1
// x and y
BinaryExpr = Test (Binop Test)*

// A binary operator in a binary expression.
//
// Examples:
//
// or
// +
// ==
Binop =
    'or'
  | 'and'
  | '==' | '!=' | '<' | '>' | '<=' | '>=' | 'in' | 'not' 'in'
  | '|'
  | '^'
  | '&'
  | '<<' | '>>'
  | '-' | '+'
  | '*' | '%' | '/' | '//'

// A lambda expression.
//
// Examples:
//
// lambda x: x * 2
// lambda x, y: x + y
LambdaExpr = 'lambda' Parameters? ':' Test

// An expression that can contain multiple comma-separated tests.
//
// Examples:
//
// x, y, z
// x + 1, y - 1
Expression = Test (',' Test)*

// Represents one or more variables in a loop statement.
//
// Examples:
//
// x
// x, y
// key, value
//
// Usage in ForStmt:
//
// for x in range(5):
//     print(x)
//
// for key, value in dictionary.items():
//     print(key, value)
LoopVariables = PrimaryExpr (',' PrimaryExpr)*