# Parse Rust code to work out the precise set of source files for each crate.
# This uses `srcfiles` which only works on Rust 2018 and without some macro
# constructions. It works in almost all cases, but you may need to have a
# fixups.toml adding extra srcs if it fails.
precise_srcs = true

rustc_flags = ["--cap-lints=allow"]

# If a fixups.toml file is needed (eg, the package has a build.rs), then
# generate a template fixups.toml to be edited.
fixup_templates = true

# Include an explicit public top-level target which depends on all other library
# targets, so that you can to a test/check build.
include_top_level = false

# Configuration for vendoring
[vendor]
# Exclude files listed in the .gitignore in this directory
gitignore_checksum_exclude = [".gitignore"]
# Additional globs to ignore (prefer .gitignore for consistentcy with source
# control)
checksum_exclude = []

[cargo]
# Directories for vendored directories always have version numbers (by default
# they only have versions if there's a name collision, such as multiple versions
# of the same package). This option can speed up `cargo vendor` when there are
# lots packages being managed.
versioned_dirs = true

# Support Cargo's unstable "artifact dependencies" functionality, RFC 3028.
# bindeps = true

# Configuration for generated BUCK file
[buck]
# Name of the generated file
file_name = "BUCK" # default

# Rules used for various kinds of targets. These rules don't directly correspond
# with BUCK rules - they have extra attributes such as per-platform settings.
# The intent is that you provide a set of macro definitions which resolve them
# to appropriate underlying rules suitable for your environment. (This may also
# work for Buck-like build systems such as Bazel.)
rust_library = "third_party_rust_library"                      # A plain Rust library
rust_binary = "third_party_rust_binary"                        # A Rust executable
cxx_library = "third_party_rust_cxx_library"                   # A C++ library (mostly for Rust -> C dependencies)
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library" # A prebuilt library (mostly for Rust -> C dependencies)
buildscript_genrule_args = "rust_buildscript_genrule_args"     # A genrule for rustc args from a build script
buildscript_genrule_srcs = "rust_buildscript_genrule_srcs"     # A genrule for generated sources from a build script

generated_file_header = """
\"\"\"
Generated by `reindeer buckify` from `Cargo.toml` located in the third-party/ directory.

NOTE: This file is entirely managed by reindeer and should not be edited directly.
      Instead, edit the `Cargo.toml` file in third-party/ and run `reindeer buckify` again.

See https://github.com/facebookincubator/reindeer for more information.
Assuming reindeer is installed, to regenerate this file, run `reindeer --third-party-dir
third-party vendor && reindeer --third-party-dir third-party buckify` from the root
of the project.
\"\"\"
"""

# Load the macros to which the rules above will resolve.
buckfile_imports = """
load(
    "//third-party/macros:rust_third_party.bzl",
    "rust_buildscript_genrule_args", # names match above
    "rust_buildscript_genrule_srcs",
    "third_party_rust_library",
    "third_party_rust_binary",
    "third_party_rust_cxx_library",
    "third_party_rust_prebuilt_cxx_library",
)
"""
